image:
  name: gesiscss/k8s-bhub-example
  tag: c2a6212-2

config:
  BinderHub:
    base_url: /services/binder/
    hub_url: https://notebooks-test.gesis.org/
    query_parameter_names: ['run-nbgitpuller']

    appendix: |
      USER root
      ENV BINDER_URL={binder_url}
      ENV REPO_URL={repo_url}
      USER $NB_USER
      RUN pip install nbgitpuller
      RUN jupyter serverextension enable --py nbgitpuller --sys-prefix

jupyterhub:
  hub:
    baseUrl: /
    image:
      name: gesiscss/k8s-hub-example
      tag: "d190af2"

    services:
      binder:
        url: http://194.95.75.10:30193
        oauth_redirect_uri: "https://notebooks-test.gesis.org/services/binder/oauth_callback"

    extraConfig:
      hub_extra: |
        c.JupyterHub.redirect_to_server = False
        c.JupyterHub.bind_url = 'https://notebooks-test.gesis.org/'
        if "cookie_options" in c.JupyterHub.tornado_settings:
          c.JupyterHub.tornado_settings["cookie_options"].update({"secure": True})
        else:
          c.JupyterHub.tornado_settings["cookie_options"] = dict(secure=True)
      templates: |
        c.JupyterHub.template_paths = ['/srv/jhub_custom_templates']
      binder: |
        from tornado import web
        from kubespawner import KubeSpawner
        from os.path import join

        class BinderSpawner(KubeSpawner):
          banned_images = []
          # allowed_images = []
          def start(self):
            if 'image' in self.user_options and \
              'repo_url' in self.user_options and \
              'token' in self.user_options:
              # binder service sets the image spec via user options
              self.image = self.user_options['image']
              # NOTE: user can pass any options through API (without using binder) too
              if self.image in self.banned_images or self.image.split(':')[0] in self.banned_images:
                self.log.error("Image %s is in banned.", self.image)
                raise web.HTTPError(400, "Image %s is in banned.", self.image)
              self.repo_url = self.user_options['repo_url'].rstrip('/').rstrip('.git')
              self.ref = self.image.split(':')[-1]
            else:
              # user starts server without binder form (default)
              # for example via spawn url or by refresing user page when server was stopped
              # launch latest repo in history
              state = self.get_state()
              self.repo_url, self.ref, _ = state['history'][-1]

            data_folder = 'persistent_storage'  # shared between repos
            #repo_name = self.repo_url.rstrip('/').split('/')[-1]
            repo_dir = '_'.join(reversed(self.repo_url.split('/')[-2:]))
            if repo_dir == data_folder:
              repo_dir += '_'
            symlink_dir = join(repo_dir, data_folder)
            # symlink_cmd: create a symlink to home if directory or symlink with same name does not exist
            symlink_cmd = f"if [ -d {symlink_dir} ]; " \
                          f"then echo 'directory {symlink_dir} exists'; " \
                          f"elif [ -L {symlink_dir} ]; " \
                          f"then echo '{symlink_dir} is a symlink'; " \
                          f"else mkdir -p ~/{data_folder} && ln -s ~/{data_folder} {symlink_dir}; fi"
            if self.repo_url.endswith('github.com/gesiscss/data_science_image'):
              command = f"mkdir -p {repo_dir} && " + symlink_cmd
              self.lifecycle_hooks = {'postStart': {'exec': {'command': ["/bin/sh", "-c", command]}}}
            elif self.user_options.get('run-nbgitpuller', 'true').lower() in ['true', '1']:
              # by default run nbgitpuller
              command = f"gitpuller {self.repo_url} master {repo_dir} && " + symlink_cmd
              self.lifecycle_hooks = {'postStart': {'exec': {'command': ["/bin/sh", "-c", command]}}}
            else:
              self.lifecycle_hooks = {}
            self.notebook_dir = '~/' + repo_dir
            #self.default_url = '/tree/' + repo_dir

            self.extra_pod_config.update({'restart_policy': 'Never'})
            return super().start()

          def get_state(self):
            _state = self.orm_spawner.state
            # default default_list is only to use when first login
            default_list = [['https://github.com/gesiscss/data_science_image', 'master', 'never']]
            history = _state.get('history', default_list) if _state else default_list
            state = super().get_state()
            state['history'] = history
            if hasattr(self, 'repo_url') and hasattr(self, 'ref'):
              from datetime import datetime
              e = (self.repo_url, self.ref, datetime.utcnow().strftime("%d.%m.%Y %H:%M"))
              _history = []
              for h in history:
                if h[0] != e[0]:
                  _history.append(h)
              _history.append(e)
              state['history'] = _history[-10:]  # save last 10 launched images
            if not state['history']:
              state['history'] = default_list
            return state
        c.JupyterHub.spawner_class = BinderSpawner

  auth:
    github:
      callbackUrl: "https://notebooks-test.gesis.org/hub/oauth_callback"

  singleuser:
    storage:
      type: dynamic
      capacity: 5Gi
    image:
      # https://github.com/gesiscss/data_science_image
      name: gesiscss/singleuser-orc
      tag: "r2d-e1b414e1"
