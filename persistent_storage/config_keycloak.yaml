jupyterhub:
  hub:
    extraConfig:
      # FIXME this doesnt overwrite the default logout handler
      extra_handlers: |
        from urllib.parse import urlencode
        from jupyterhub.handlers import LogoutHandler
        # this handler is copied from
        # https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/886#issuecomment-470869625
        class OIDCLogoutHandler(LogoutHandler):
          kc_logout_url = 'https://login-test.gesis.org/auth/realms/gesis/protocol/openid-connect/logout'

          def get(self):
            # redirect to keycloak logout url and redirect back with kc=true parameters
            # then proceed with the original logout method.
            logout_kc = self.get_argument('kc', '')
            if logout_kc != 'true':
              logout_url = self.request.full_url() + '?kc=true'
              self.redirect(self.kc_logout_url + '?' + urlencode({ 'redirect_uri' : logout_url}))
            else:
              super().get()

        from oauthenticator.generic import GenericOAuthenticator
        def logout_url(self, base_url):
          return url_path_join(base_url, 'logout_all')
        GenericOAuthenticator.logout_url = logout_url

        import json
        from tornado.escape import json_decode
        from jupyterhub.handlers import BaseHandler
        class ProjectDeletionHandler(BaseHandler):

            def strip_repo_url(self, repo_url):
                return repo_url.lstrip("http://").lstrip("https://").rstrip('.git').rstrip('/')

            @web.authenticated
            def post(self):
                response_to_send = {}
                user = self.current_user
                if user.running:
                    response_to_send["error"] = "Project deletion is not allowed while user server is running."
                else:
                    json_obj = json_decode(self.request.body)
                    if "repo_url" in json_obj and "name" in json_obj and "id" in json_obj:
                        repo_url = self.strip_repo_url(json_obj["repo_url"])
                        delete_on_disk = json_obj.get("delete_on_disk", False)
                        state = user.spawner.get_state()
                        history = []
                        delete_list = []
                        found = False
                        for project in state.get("history", []):
                            if repo_url != self.strip_repo_url(project[0]):
                                history.append(project)
                            else:
                              found = True
                              if delete_on_disk is True and repo_url not in delete_list:
                                  delete_list.append(repo_url)
                        if found is True:
                            state["history"] = history
                            state["delete_list"].extend(delete_list)
                            user.spawner.orm_spawner.state = state
                            self.db.commit()

                            response_to_send["success"] = f"Project {json_obj['name']} is deleted."
                            response_to_send["id"] = json_obj["id"]
                        else:
                            response_to_send["error"] = f"Project {json_obj['name']} ({json_obj['repo_url']}) doesn't exist."
                    else:
                        response_to_send["error"] = "Bad request."
                self.write(json.dumps(response_to_send))

        c.JupyterHub.extra_handlers = [(r'/logout_all', OIDCLogoutHandler),
                                       (r'/delete_project', ProjectDeletionHandler),]
    extraEnv:
      OAUTH2_AUTHORIZE_URL: https://login-test.gesis.org/auth/realms/gesis/protocol/openid-connect/auth
      OAUTH2_TOKEN_URL: https://login-test.gesis.org/auth/realms/gesis/protocol/openid-connect/token
  auth:
    # https://zero-to-jupyterhub.readthedocs.io/en/latest/authentication.html#openid-connect
    type: custom
    custom:
      className: oauthenticator.generic.GenericOAuthenticator
      config:
        login_service: "Test Login"
        token_url: https://login-test.gesis.org/auth/realms/gesis/protocol/openid-connect/token
        userdata_url: https://login-test.gesis.org/auth/realms/gesis/protocol/openid-connect/userinfo
        userdata_method: GET
        userdata_params: {'state': 'state'}
        username_key: preferred_username
    admin:
      users: ['kenanerdogan@gmail.com', 'arnim.bleier@gmail.com']
